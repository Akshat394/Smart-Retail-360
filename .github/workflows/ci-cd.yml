name: SmartRetail360 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.9'

jobs:
  # Frontend Testing & Build
  frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run check
      
    - name: Run frontend tests
      run: npm run test:frontend
      
    - name: Build frontend
      run: npm run build:frontend
      
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: client/dist/
        
  # Backend Testing & Build
  backend:
    name: Backend Tests & Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run backend tests
      run: npm run test:backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: Build backend
      run: npm run build:backend
      
    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: dist/
        
  # ML Service Testing
  ml-service:
    name: ML Service Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('ml_service/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        cd ml_service
        pip install -r requirements.txt
        
    - name: Run ML service tests
      run: |
        cd ml_service
        python -m pytest tests/ -v
        
    - name: Run model training tests
      run: |
        cd ml_service
        python train_and_save_model.py --test
        
  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: npm run security:audit
      
    - name: Run security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=critical
      continue-on-error: true
        
    - name: Run CodeQL analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, python
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend, ml-service]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        npm ci
        cd ml_service && pip install -r requirements.txt
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: client/dist/
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: dist/
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.json
        
  # Docker Build & Push
  docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [integration, performance]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        file: ./client/Dockerfile
        push: true
        tags: |
          smartretail360/frontend:latest
          smartretail360/frontend:${{ github.sha }}
          
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        file: ./server/Dockerfile
        push: true
        tags: |
          smartretail360/backend:latest
          smartretail360/backend:${{ github.sha }}
          
    - name: Build and push ML service image
      uses: docker/build-push-action@v5
      with:
        context: ./ml_service
        file: ./ml_service/Dockerfile
        push: true
        tags: |
          smartretail360/ml-service:latest
          smartretail360/ml-service:${{ github.sha }}
          
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/develop'
    env:
      DEPLOY_ENV: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here
        
  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    env:
      DEPLOY_ENV: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
        
    - name: Run health checks
      run: |
        echo "Running health checks..."
        # Add health check commands here
        
    - name: Notify deployment success
      run: |
        echo "Production deployment successful!"
        # Add notification commands here (Slack, email, etc.)
        
  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Cleanup artifacts
      run: |
        echo "Cleaning up build artifacts..."
        # Add cleanup commands here 