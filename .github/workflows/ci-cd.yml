name: SmartRetail360 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.9'

jobs:
  # Frontend Tests & Build
  frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      continue-on-error: true
      
    - name: Type checking
      run: npm run check
      continue-on-error: true
      
    - name: Run frontend tests
      run: npm run test:frontend
      continue-on-error: true
      
    - name: Build frontend
      run: npm run build:frontend
      continue-on-error: true
      
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-build
        path: dist/
        retention-days: 1

  # Backend Tests & Build
  backend:
    name: Backend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run backend tests
      run: npm run test:backend
      continue-on-error: true
      
    - name: Build backend
      run: npm run build:backend
      continue-on-error: true
      
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-build
        path: server/dist/
        retention-days: 1

  # ML Service Tests
  ml-service:
    name: ML Service Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        cd ml_service
        pip install -r requirements.txt
        
    - name: Run ML service tests
      run: |
        cd ml_service
        python -m pytest tests/ -v
      continue-on-error: true
      
    - name: Upload ML service artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ml-service-build
        path: ml_service/
        retention-days: 1

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend, ml-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run integration tests
      run: npm run test:integration
      continue-on-error: true
      
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: test-results/
        retention-days: 1

  # Security & Quality Checks
  security:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Run code quality checks
      run: npm run quality
      continue-on-error: true
      
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: security-report/
        retention-days: 1

  # Docker Build & Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [frontend, backend, ml-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and test Docker images
      run: |
        # Build frontend image
        docker build -t smartretail360-frontend:test client/
        
        # Build backend image
        docker build -t smartretail360-backend:test server/
        
        # Build ML service image
        docker build -t smartretail360-ml:test ml_service/
        
        # Test Docker Compose
        docker-compose -f docker-compose.yml config
      continue-on-error: true
      
    - name: Upload Docker artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-builds
        path: docker-logs/
        retention-days: 1

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: npm run test:performance
      continue-on-error: true
      
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: performance-results/
        retention-days: 1

  # Deployment Preparation
  deploy-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: [frontend, backend, ml-service, integration, security, docker, performance]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        cp -r artifacts/* deployment-package/
        cp docker-compose.yml deployment-package/
        cp vercel.json deployment-package/
        cp package.json deployment-package/
        cp VERCEL_DEPLOYMENT_GUIDE.md deployment-package/
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment-package/
        retention-days: 7

  # Vercel Deployment
  vercel-deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [frontend, backend, ml-service, integration, security, docker, performance, deploy-prep]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Deploy to Vercel
      run: |
        echo "üöÄ Deploying to Vercel..."
        echo "This is a placeholder for Vercel deployment"
        echo "To deploy to Vercel:"
        echo "1. Connect your repository to Vercel"
        echo "2. Configure environment variables"
        echo "3. Deploy using Vercel dashboard or CLI"
        echo "See VERCEL_DEPLOYMENT_GUIDE.md for details"
      continue-on-error: true
      
    - name: Upload deployment status
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: vercel-deployment-status
        path: deployment-status.txt
        retention-days: 1

  # Final Status Check
  status:
    name: Pipeline Status
    runs-on: ubuntu-latest
    needs: [frontend, backend, ml-service, integration, security, docker, performance, deploy-prep, vercel-deploy]
    if: always()
    
    steps:
    - name: Check pipeline status
      run: |
        echo "Pipeline completed!"
        echo "Frontend: ${{ needs.frontend.result }}"
        echo "Backend: ${{ needs.backend.result }}"
        echo "ML Service: ${{ needs.ml-service.result }}"
        echo "Integration: ${{ needs.integration.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Docker: ${{ needs.docker.result }}"
        echo "Performance: ${{ needs.performance.result }}"
        echo "Deploy Prep: ${{ needs.deploy-prep.result }}"
        
        # Determine overall status
        if [[ "${{ needs.frontend.result }}" == "success" && "${{ needs.backend.result }}" == "success" ]]; then
          echo "‚úÖ Core build steps passed"
          exit 0
        else
          echo "‚ùå Core build steps failed"
          exit 1
        fi 